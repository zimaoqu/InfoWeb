package com.scorpion.dao;

import com.scorpion.pojo.ComNameNewsCount;
import com.scorpion.pojo.NewsOfCompany;
import com.scorpion.pojo.NewsOfCompanyExample;
import com.scorpion.pojo.NewsOfCompanyWithBLOBs;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Param;

public interface NewsOfCompanyMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_content
     *
     * @mbggenerated
     */
    int countByExample(NewsOfCompanyExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_content
     *
     * @mbggenerated
     */
    int deleteByExample(NewsOfCompanyExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_content
     *
     * @mbggenerated
     */
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_content
     *
     * @mbggenerated
     */
    int insert(NewsOfCompanyWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_content
     *
     * @mbggenerated
     */
    int insertSelective(NewsOfCompanyWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_content
     *
     * @mbggenerated
     */
    List<NewsOfCompanyWithBLOBs> selectByExampleWithBLOBs(NewsOfCompanyExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_content
     *
     * @mbggenerated
     */
    List<NewsOfCompany> selectByExample(NewsOfCompanyExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_content
     *
     * @mbggenerated
     */
    NewsOfCompanyWithBLOBs selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_content
     *
     * @mbggenerated
     */
    int updateByExampleSelective(@Param("record") NewsOfCompanyWithBLOBs record, @Param("example") NewsOfCompanyExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_content
     *
     * @mbggenerated
     */
    int updateByExampleWithBLOBs(@Param("record") NewsOfCompanyWithBLOBs record, @Param("example") NewsOfCompanyExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_content
     *
     * @mbggenerated
     */
    int updateByExample(@Param("record") NewsOfCompany record, @Param("example") NewsOfCompanyExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_content
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(NewsOfCompanyWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_content
     *
     * @mbggenerated
     */
    int updateByPrimaryKeyWithBLOBs(NewsOfCompanyWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_content
     *
     * @mbggenerated
     */
    int updateByPrimaryKey(NewsOfCompany record);

    /**
     * 获取所有公司的新闻
     * @return
     */
    List<NewsOfCompanyWithBLOBs> selectAllNews(Map<String,Integer> map);

    /**
     * 根据公司名称和page获取20条新闻
     * @param map
     * @return
     */
    List<NewsOfCompanyWithBLOBs> selectCompanyNewsSizeTwenty(Map<String,Integer> map);

    /**
     * 获取所有新闻的条数
     */
    int countAllNews();
    /**
     * 获取匹配结果的公司的新闻
     * @return
     */
    List<NewsOfCompanyWithBLOBs> selectMatchNews(Map map);
    /**
     * 获取匹配新闻的条数
     */
    int countMatchNews(Map map);

    /**
     * 根据companyname、时间条件来获取健康值
     * @param map
     * @return
     */
    List<Double> getQuartervalue(Map map);

    /**
     * 正面新闻量(时间限制)
     * @return
     */
    int getPosnum(Map map);

    /**
     * 负面新闻量(时间限制)
     * @return
     */
    int getNegnum(Map map);

    /**
     * 中立新闻量(时间限制)
     * @param map
     * @return
     */
    int getNeunum(Map map);


    /**
     * 正面新闻量(All Time)
     * @return
     */
    int getAllTimePosnum(Map map);

    /**
     * 负面新闻量(All Time)
     * @return
     */
    int getAllTimeNegnum(Map map);

    /**
     * 中立新闻量(All Time)
     * @return
     */
    int getAllTimeNeunum(Map map);



    /**
     * 获取某个公司的正面新闻
     * @param map
     * @return
     */
    List<NewsOfCompanyWithBLOBs> getPosnews(Map map);
    /**
     * 获取某个公司的中立新闻
     * @param map
     * @return
     */
    List<NewsOfCompanyWithBLOBs> getNeunews(Map map);
    /**
     * 获取某个公司的负面新闻
     * @param map
     * @return
     */
    List<NewsOfCompanyWithBLOBs> getNegnews(Map map);

    /**
     * 获取公司的准确名字
      * @param map
     * @return
     */
    String getCompanyName(Map map);

    /**
     * 所有公司名字
     * @return
     */
    List<String> getComList();

    /**
     * 获取新闻的关键词
     * @return
     */
    List<String> getComKeywords(Map map);

    /*
    企业新闻数统计
     */
    List<ComNameNewsCount> NewsCount();
    /**
     * 获取匹配结果的公司的新闻数
     * @return
     */
    List<ComNameNewsCount> getMatchNewsCount(Map map);
}